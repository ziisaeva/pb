#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> result;
        vector<int> queens(n, -1);        
        backtrack(result, queens, 0, n);
        
        return result;
    }
    
private:
    void backtrack(vector<vector<string>>& result, vector<int>& queens, int row, int n) {
        if (row == n) {
            result.push_back(generateBoard(queens, n));
            return;
        }
        
        for (int col = 0; col < n; col++) {
            if (isValidPosition(queens, row, col)) {
                queens[row] = col;
                
                backtrack(result, queens, row + 1, n);
                
                queens[row] = -1;
            }
        }
    }
    
    bool isValidPosition(vector<int>& queens, int row, int col) {
        for (int i = 0; i < row; i++) {
            if (queens[i] == col || abs(row - i) == abs(col - queens[i])) {
                return false;
            }
        }
        return true;
    }
    
    vector<string> generateBoard(vector<int>& queens, int n) {
        vector<string> board(n, string(n, '.'));
        for (int i = 0; i < n; i++) {
            board[i][queens[i]] = 'Q';
        }
        return board;
    }
};

int main() {
    Solution solution;
    
    int n = 4;
    vector<vector<string>> result = solution.solveNQueens(n);
    
    for (auto board : result) {
        for (auto row : board) {
            cout << row << endl;
        }
        cout << endl;
    }
    
    return 0;
}
